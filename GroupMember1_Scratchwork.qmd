---
title: "Untitled"
author: "Dereje Pollock"
format: pdf
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE, fig.height=4, fig.width=10)
```

```{r}
# load packages - add any you would like
library(tidyverse)
library(lme4)
library(lmerTest)
library(gridExtra)
library(knitr)
library(kableExtra)
install.packages("tinytex")

```

```{r}
library(GGally)
library(MASS)
library(mnormt) 
library(kableExtra)
library(dplyr)
install.packages("tinytex")
```

## Abstract

A 150 word abstract.

\newpage

## Background and Significance

Type background and significance section here.

## Data

```{r}
checkorders <- read.csv("food_order.csv")
```


```{r}
# Ensure strings are treated as UTF-8
checkorders$restaurant_name <- iconv(checkorders$restaurant_name, to = "UTF-8")
```

```{r}
# Redefine the old and new names, making sure they're in UTF-8
old_values <- c('Big Wong Restaurant \u008c_¤¾Ñ¼', 'Empanada Mama (closed)', 'Chipotle Mexican Grill $1.99 Delivery', "Joe's Shanghai \u008e_À\u008eü£¾÷´", 'Dirty Bird To Go (archived)', 'CafÌ© China')
new_values <- c('Big Wong Restaurant', 'Empanada Mama', 'Chipotle Mexican Grill', "Joe's Shanghai", 'Dirty Bird To Go', 'Cafe China')

# Use string replacement with explicit encoding
checkorders$restaurant_name <- stringr::str_replace_all(checkorders$restaurant_name, setNames(new_values, old_values))
```


```{r}
# Generic cleanup for patterns like pricing or status
checkorders$restaurant_name <- gsub("\\$[0-9]+\\.\\d{2} Delivery", "", checkorders$restaurant_name)
checkorders$restaurant_name <- gsub("\\s*\\(closed\\)", "", checkorders$restaurant_name, ignore.case = TRUE)
checkorders$restaurant_name <- gsub("\\s*\\(archived\\)", "", checkorders$restaurant_name, ignore.case = TRUE)

# Trim and standardize the case
checkorders$restaurant_name <- stringr::str_trim(checkorders$restaurant_name)
checkorders$restaurant_name <- tools::toTitleCase(checkorders$restaurant_name)

unique(checkorders$restaurant_name)
```





```{r}
orders <- checkorders
```



```{r}

```


```{r}
library(dplyr)

# Assuming 'orders' is your dataframe
filtered_orders <- orders %>%
  group_by(customer_id) %>%         # Group by customer_id
  arrange(desc(cost_of_the_order)) %>% # Arrange by cost_of_the_order descending
  slice(1) %>%                      # Select the first row of each group
  ungroup()                         # Ungroup to remove grouping

glimpse(filtered_orders)

orders <- filtered_orders

```
```{r}
# Ensure that dplyr is loaded
library(dplyr)

# Use the dplyr select function explicitly if there is a namespace conflict
orders <- dplyr::select(orders, -customer_id)

# Check the updated structure of the DataFrame to confirm the removal
glimpse(orders)
```








```{r}
# Load necessary libraries
# library(tidyverse)
# library(lme4) # for linear mixed-effects models

# Load the dataset
#orders_without_customer_id <- read.csv("/mnt/data/orders_without_customer_id2.csv")

# Convert 'day_of_the_week' and 'cuisine_type' to factors
orders$day_of_the_week <- as.factor(orders$day_of_the_week)
orders$cuisine_type <- as.factor(orders$cuisine_type)
orders$restaurant_name <- as.factor(orders$restaurant_name)
# Convert 'rating' to numeric, treating 'Not given' as NA
orders$rating <- as.numeric(replace(orders$rating, orders$rating == "Not given", NA))

# Impute missing ratings if necessary, using a method like the mean of available ratings
#if (sum(is.na(orders_without_customer_id$rating)) > 0) {
#  mean_rating <- mean(orders_without_customer_id$rating, na.rm = TRUE)
#  orders_without_customer_id$rating[is.na(orders_without_customer_id$rating)] <- mean_rating
#}

glimpse(orders)
```

```{r}

# Rename specified columns in the DataFrame
orders5 <- orders %>%
  rename(
    restaurant = restaurant_name,
    cost = cost_of_the_order,
    WeekendOrWeekday = day_of_the_week,
    prepTime = food_preparation_time,
    deliveryTime = delivery_time
  )

glimpse(orders5)
```

```{r}

# Filter restaurants with at least 20 orders
orders6 <- orders5 %>%
  group_by(restaurant) %>%  # Group data by restaurant
  filter(n() >= 10) %>%     # Filter groups with at least 10 orders
  ungroup()                 # Remove the grouping

glimpse(orders6)
write.csv(orders5, "orders6.csv", row.names = FALSE)
```










```{r}
# Extract unique cuisine types
unique_cuisines <- unique(orders6$cuisine_type)

# Print the list of unique cuisine types
print(unique_cuisines)
```

```{r}
# Count the number of orders for each cuisine type
cuisine_counts <- table(orders6$cuisine_type)

# Sort the counts in descending order
sorted_cuisine_counts <- sort(cuisine_counts, decreasing = TRUE)

# Print the sorted counts
print(sorted_cuisine_counts)

```


```{r}

# Count the number of unique restaurants for each cuisine type
cuisine_restaurant_count <- orders6 %>%
  group_by(cuisine_type) %>%
  summarise(number_of_restaurants = n_distinct(restaurant))

# View the results
print(cuisine_restaurant_count)
```

```{r}

# Count the number of orders for each restaurant
restaurant_order_count <- orders6 %>%
  group_by(restaurant) %>%
  summarise(number_of_orders = n(), .groups = 'drop')  # Count the number of rows (orders) for each group

# Print the results to see the number of orders per restaurant
print(restaurant_order_count)
```



```{r}
# Arrange the dataset by restaurant, and within each restaurant by order_id
orders_sorted <- orders6 %>%
  arrange(restaurant, order_id)

# View the structure and head of the sorted dataset to confirm the changes
glimpse(orders_sorted)
head(orders_sorted)
```
```{r}
# Add a new variable for total time
orders_sorted$totalTime <- orders_sorted$prepTime + orders_sorted$deliveryTime
```

```{r}
NYCFoodOrders <- orders_sorted

write.csv(NYCFoodOrders, "FinalOrders.csv", row.names = FALSE)
```


```{r}

# Simplified model with only a random intercept for each restaurant
model <- lmer(cost ~ prep_time +  (1 | restaurant), data = NYCFoodOrders)

# Check the model summary
summary(model)
```


```{r}
M13 <- lmer(cost ~ prep_time +  (1 | restaurant), data = NYCFoodOrders)

# Check the model summary
summary(M13)

```

```{r}
M14 <- lmer(cost ~ prep_time + cuisine_type +  cuisine_type:prep_time +(1 | restaurant), data = FoodOrdersNYC)

# Check the model summary
summary(M14)

```
```{r}
M14 <- lmer(cost ~ prep_time + cuisine_type +  cuisine_type:prep_time +(1 | restaurant), data = FoodOrdersNYC)

# Check the model summary
summary(M14)

```

```{r}
M15 <- lmer(data=FoodOrdersNYC, cost ~ prep_time + (1 | restaurant) + (1 | cuisine_type), REML=TRUE)
summary(M15)
```

```{r}
# Fit the unconditional means model
M_null <- lmer(cost ~ 1 + (1 | restaurant), data = NYCFoodOrders)

# Check the model summary
summary(M_null)
```







```{r}
# Create a basic scatter plot
p_basic <- ggplot(NYCFoodOrders, aes(x = total_time, y = cost)) +
  geom_point() +
  labs(title = "Basic Scatter Plot of Cost vs. Prep Time")
print(p_basic)
```



```{r}

# Create the scatter plot with adjustments for better display
p_total_time_by_cuisine <- ggplot(NYCFoodOrders, aes(x = prep_time, y = cost)) +
  geom_point(alpha = 0.6, color = "blue") +  # Add points
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add fitted line
  facet_wrap(~cuisine_type, scales = "free", nrow = 2) +  # Facet by cuisine with two rows
  theme_minimal() +  # Minimal theme
  theme(
    axis.text.x = element_text(size = 8),  # Smaller text size for x-axis labels
    axis.text.y = element_text(size = 8),  # Smaller text size for y-axis labels
    strip.text.x = element_text(size = 10, angle = 0)  # Smaller facet labels, no angle
  ) +
  labs(
    title = "Cost vs Prep_time by Cuisine Type",
    x = "Total Time (prep + delivery, minutes)",
    y = "Cost ($)"
  )

# Print the plot
print(p_total_time_by_cuisine)
```


```{r}
# Create the scatter plot with adjustments for better display
prep_timevsCost <- ggplot(NYCFoodOrders, aes(x = total_time, y = cost)) +
  geom_point(alpha = 0.6, color = "blue") +  # Add points
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add fitted line
  facet_wrap(~cuisine_type, scales = "free", nrow = 2) +  # Facet by cuisine with two rows
  theme_minimal() +  # Minimal theme
  theme(
    axis.text.x = element_text(size = 8),  # Smaller text size for x-axis labels
    axis.text.y = element_text(size = 8),  # Smaller text size for y-axis labels
    strip.text.x = element_text(size = 10, angle = 0)  # Smaller facet labels, no angle
  ) +
  labs(
    title = "Cost vs Total Time by Cuisine Type",
    x = "Total Time (prep + delivery, minutes)",
    y = "Cost ($)"
  )

# Print the plot
print(prep_timevsCost)
```

```{r}
# Filter for American cuisine
american_restaurants <- FoodOrdersNYC[FoodOrdersNYC$cuisine_type == "American", ]

```


```{r}
# Revised plot with adjusted axis limits and improved aesthetics
p_american_revised <- ggplot(american_restaurants, aes(x = prep_time, y = cost)) +
  geom_point(alpha = 0.6, color = "blue", size = 2) +  # Adjust point size
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add fitted line
  facet_wrap(~restaurant, scales = "free", ncol = 5) +  # Organize facets
  scale_x_continuous(limits = c(15, 40), breaks = seq(15, 40, 5)) +  # Adjust x-axis limits and breaks
  theme_minimal(base_size = 8) +  # Increase base font size for better readability
  theme(
    strip.text.x = element_text(size = 9, angle = 0, hjust = 0.5),  # Adjust facet label size and angle
    panel.grid.major.x = element_line(color = "gray80"),  # Add major x grid lines
    panel.grid.minor.x = element_line(color = "gray90", linetype = "dotted")  # Add minor x grid lines
  ) +
  labs(
    title = "Cost vs Prep Time for American Cuisine by Restaurant",
    x = "Preparation Time (minutes)",
    y = "Cost ($)",
    subtitle = "Each panel represents a different American cuisine restaurant"
  )

# Print the plot
print(p_american_revised)
```


```{r}
# Fit the linear mixed-effects model
model_american <- lmer(cost ~ prep_time + (1 | restaurant), data = american_restaurants)

# Check the summary of the model
summary(model_american)
```


```{r}
# Filter for Japanese cuisine
Japanese_restaurants <- FoodOrdersNYC[FoodOrdersNYC$cuisine_type == "Japanese", ]
```

```{r}
# Revised plot with adjusted axis limits and improved aesthetics
p_japanese <- ggplot(Japanese_restaurants, aes(x = prep_time, y = cost)) +
  geom_point(alpha = 0.6, color = "blue", size = 2) +  # Adjust point size
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add fitted line
  facet_wrap(~restaurant, scales = "free", ncol = 5) +  # Organize facets
  scale_x_continuous(limits = c(15, 40), breaks = seq(15, 40, 5)) +  # Adjust x-axis limits and breaks
  theme_minimal(base_size = 8) +  # Increase base font size for better readability
  theme(
    strip.text.x = element_text(size = 9, angle = 0, hjust = 0.5),  # Adjust facet label size and angle
    panel.grid.major.x = element_line(color = "gray80"),  # Add major x grid lines
    panel.grid.minor.x = element_line(color = "gray90", linetype = "dotted")  # Add minor x grid lines
  ) +
  labs(
    title = "Cost vs Prep Time for Japanese Cuisine by Restaurant",
    x = "Preparation Time (minutes)",
    y = "Cost ($)",
    subtitle = "Each panel represents a different Japanese cuisine restaurant"
  )

# Print the plot
print(p_japanese)
```
```{r}
library(ggformula)
```



```{r}
# Create a summary table
cuisine_restaurants <- FoodOrdersNYC %>%
  group_by(cuisine_type) %>%
  summarise(Restaurants = list(unique(restaurant)), .groups = 'drop')  # Use 'list' to keep it in a list format if needed

# View the table
kable(cuisine_restaurants)
```











```{r}
# Extract unique restaurant types
unique_restaurants <- unique(NYCFoodOrders$restaurant)

# Print the list of unique cuisine types
print(unique_restaurants)
```

```{r}
# Calculate the number of orders per restaurant
orders_per_restaurant <- NYCFoodOrders %>%
  group_by(restaurant) %>%
  summarise(Orders = n(), .groups = 'drop') %>%
  arrange(desc(Orders))  # Arrange in descending order of orders

# Print the result
print(orders_per_restaurant)
```















```{r}

```

```{r}
# Load the dataset

# Load the dataset
NYCFoodOrders <- read.csv("food_order_2nd.csv")

# Convert 'rating' to numeric from character
NYCFoodOrders$rating <- as.numeric(as.character(NYCFoodOrders$rating))

# Data manipulation
NYCFoodOrders <- NYCFoodOrders %>%
  arrange(restaurant_name, day_of_the_week, customer_id, order_id) %>%
  mutate(order_id = as.numeric(factor(order_id, levels = unique(order_id)))) %>%
  rename(
    customer_id = customer_id, 
    restaurant = restaurant_name, 
    cuisine_type = cuisine_type, 
    cost = cost_of_the_order,
    WeekendOrWeekday = day_of_the_week,
    prep_time = food_preparation_time,
    delivery_time = delivery_time
  ) %>%
  select(restaurant, cuisine_type, WeekendOrWeekday, order_id, cost, rating, prep_time, delivery_time) %>%
  group_by(restaurant) %>%
  filter(n() > 2) %>%  # Filter out restaurants with 2 or fewer orders
  ungroup()

# Checking the head of the cleaned data
head(NYCFoodOrders)

# Write the cleaned data back to CSV
write.csv(NYCFoodOrders, "NYCFoodOrders.csv", row.names = FALSE)


```

Type data section here. Include captions with tables and graphs. Examples:

```{r}
NYCFoodOrders <- read.csv("NYCFoodOrders.csv")
```

```{r}
table1 <- NYCFoodOrders %>%
  filter(row_number() < 11 )
kable(table1, booktabs=T, caption="The First 10 observations") %>%
  kable_styling(font_size = 8, latex_options = c("scale_down", "striped"))
```

```{r}
ggplot(data=NYCFoodOrders, aes(x=prep_time)) + 
  geom_histogram(binwidth = 1, color="black", fill="white") + 
  xlab("prep time(minutes))") + 
  ylab("Count") +
  ggtitle("fig. 1: Distribution of prep time")
```

```{r}
ggplot(data=NYCFoodOrders, aes(x=cost)) + 
  geom_histogram(binwidth=1, color="black", fill="white") + 
  xlab("Price (USD)") + 
  ylab("Count") +
  ggtitle("fig. 2: Order Prices")
```

```{r}
library(corrplot)

# Calculate correlation matrix
cor_matrix <- cor(NYCFoodOrders[, c("cost", "prep_time", "delivery_time")])

# Plot the heatmap
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust",
         tl.col = "black", tl.srt = 45, # Text label color and rotation
         addCoef.col = "blue", # Add correlation coefficients
         col = colorRampPalette(c("white", "grey", "black"))(200)) # Color palette

```

## Methods

```{r}
# Extract unique cuisine types
unique_cuisines <- unique(NYCFoodOrders$cuisine_type)

# Print the list of unique cuisine types
print(unique_cuisines)
```

```{r}
# Count the number of orders for each cuisine type
cuisine_counts <- table(NYCFoodOrders$cuisine_type)

# Sort the counts in descending order
sorted_cuisine_counts <- sort(cuisine_counts, decreasing = TRUE)

# Print the sorted counts
print(sorted_cuisine_counts)

```

```{r}
# Extract unique restaurant types
unique_restaurants <- unique(NYCFoodOrders$restaurant)

# Print the list of unique cuisine types
print(unique_restaurants)
```

```{r}
# Calculate the number of orders per restaurant
orders_per_restaurant <- NYCFoodOrders %>%
  group_by(restaurant) %>%
  summarise(Orders = n(), .groups = 'drop') %>%
  arrange(desc(Orders))  # Arrange in descending order of orders

# Print the result
print(orders_per_restaurant)
```

```{r}

# Step 1: Create a summarized dataset with the count of orders per restaurant
df1 <- NYCFoodOrders %>%
  group_by(restaurant) %>%
  summarise(Orders = n(), .groups = 'drop')

# Step 2: Filter restaurants with more than 15 orders
popular_restaurants <- df1 %>%
  filter(Orders > 50)

# Step 3: Filter the original dataset to include only rows from popular restaurants
TopRestaurantOrders <- NYCFoodOrders %>%
  semi_join(popular_restaurants, by = "restaurant")

# Print the new dataset or explore its structure
print(TopRestaurantOrders)
glimpse(TopRestaurantOrders)
```

```{r}
M5 <- lmer(data=TopRestaurantOrders, cost ~  + cuisine_type + prep_time + WeekendOrWeekday + (1|restaurant))

# Print the summary of the model to see the results
summary(M5)
```

```{r}
# Create diagnostic plots for the model without log transformation
# 1. Residuals vs. Fitted Values
p1_no_log <- ggplot(NULL, aes(x = fitted(M5), y = residuals(M5))) +
  geom_point(alpha = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(x = "Fitted Values", y = "Residuals", title = "Residuals vs. Fitted Values (No Log)") +
  theme_minimal()

# 2. Normal Q-Q Plot
p2_no_log <- ggplot(NULL, aes(sample = residuals(M5))) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot (No Log)") +
  theme_minimal()

# 3. Histogram of Residuals
p3_no_log <- ggplot(NULL, aes(x = residuals(M5))) +
  geom_histogram(bins = 30, fill = "lightblue", color = "black") +
  labs(x = "Residuals", title = "Histogram of Residuals (No Log)") +
  theme_minimal()

# 4. Scale-Location Plot
p4_no_log <- ggplot(NULL, aes(x = fitted(M5), y = sqrt(abs(residuals(M5))))) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess", color = "red") +
  labs(x = "Fitted Values", y = "Sqrt of |Standardized Residuals|", title = "Scale-Location Plot (No Log)") +
  theme_minimal()

# Arrange the plots for the model without log transformation
grid.arrange(p1_no_log, p2_no_log, p3_no_log, p4_no_log, nrow = 2, ncol = 2)

```

```{r}
# Assuming the 'lme4' package is already loaded
# Adding an interaction term and transforming 'prep_time'
M5_updated <- lmer(log(cost) ~ cuisine_type * WeekendOrWeekday + I(log(prep_time + 1)) + (1|restaurant), data = TopRestaurantOrders)

# Check the summary of the updated model
summary(M5_updated)
```

```{r}
library(lme4)

# Assuming 'cost' is continuous and positive
# Using Gamma family with a log link function
M5_glmm <- glmer(cost ~ cuisine_type + prep_time + WeekendOrWeekday + (1 | restaurant), 
                 data = TopRestaurantOrders, 
                 family = Gamma(link = "log"))

# Print the summary of the model
summary(M5_glmm)

```

```{r}
# Random intercepts for restaurants, random slopes for prep_time by restaurant
m6 <- lmer(cost ~ WeekendOrWeekday + prep_time + delivery_time +(restaurant|cuisine_type) + (delivery_time | restaurant), data = NYCFoodOrders)
summary(m6)
```

Type methods section here. Write your final model in equation form, like this:

Since there are 11 cuizine types, i didnt put them all into the model. \begin{align*}
Y_{ij} & = \left[\alpha_{0}+\alpha_{1}\text{CuisineType}_{i}+\beta_{0}\text{Weekend}_{ij}+\beta_{1}\text{prep\_time}_{ij}+\beta_{2}\text{delivery\_time}_{ij}\right] 
    & \quad + \left[u_{i}+\epsilon_{ij}\right] \\
    \\
\text{where} \quad & u_i \sim \mathcal{N}(0, \sigma_u^2) \quad \text{and} \quad \epsilon_{ij} \sim \mathcal{N}(0, \sigma^2)
\end{align*}

```{r}
M1 <- lmer(data=NYCFoodOrders, cost ~ cuisine_type + WeekendOrWeekday + prep_time + (1|restaurant), REML=TRUE)

# Print the summary of the model to see the results
summary(M1)
```

```{r}
library(lme4)

# Applying log transformation to the 'cost' variable directly in the model formula
M1_log <- lmer(log(cost) ~ cuisine_type + WeekendOrWeekday + prep_time + (1 | restaurant), data = NYCFoodOrders, REML = TRUE)

# Print the summary of the transformed model
summary(M1_log)
```

```{r}
library(lme4)
library(ggplot2)

# Fit the LME model without log transformation
M1 <- lmer(cost ~ cuisine_type + WeekendOrWeekday + prep_time + (1 | restaurant), data = NYCFoodOrders, REML = TRUE)

# Create diagnostic plots for the model without log transformation
# 1. Residuals vs. Fitted Values
p1_no_log <- ggplot(NULL, aes(x = fitted(M5), y = residuals(M5))) +
  geom_point(alpha = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(x = "Fitted Values", y = "Residuals", title = "Residuals vs. Fitted Values (No Log)") +
  theme_minimal()

# 2. Normal Q-Q Plot
p2_no_log <- ggplot(NULL, aes(sample = residuals(M5))) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot (No Log)") +
  theme_minimal()

# 3. Histogram of Residuals
p3_no_log <- ggplot(NULL, aes(x = residuals(M5))) +
  geom_histogram(bins = 30, fill = "lightblue", color = "black") +
  labs(x = "Residuals", title = "Histogram of Residuals (No Log)") +
  theme_minimal()

# 4. Scale-Location Plot
p4_no_log <- ggplot(NULL, aes(x = fitted(M5), y = sqrt(abs(residuals(M5))))) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess", color = "red") +
  labs(x = "Fitted Values", y = "Sqrt of |Standardized Residuals|", title = "Scale-Location Plot (No Log)") +
  theme_minimal()

# Arrange the plots for the model without log transformation
grid.arrange(p1_no_log, p2_no_log, p3_no_log, p4_no_log, nrow = 2, ncol = 2)

```

```{r}
# Fit the LME model with log transformation
M1_log <- lmer(log(cost) ~ cuisine_type + WeekendOrWeekday + prep_time + (1 | restaurant), data = NYCFoodOrders, REML = TRUE)

# Create diagnostic plots for the model with log transformation
# 1. Residuals vs. Fitted Values
p1_log <- ggplot(NULL, aes(x = fitted(M1_log), y = residuals(M1_log))) +
  geom_point(alpha = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(x = "Fitted Values", y = "Residuals", title = "Residuals vs. Fitted Values (Log)") +
  theme_minimal()

# 2. Normal Q-Q Plot
p2_log <- ggplot(NULL, aes(sample = residuals(M1_log))) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Normal Q-Q Plot (Log)") +
  theme_minimal()

# 3. Histogram of Residuals
p3_log <- ggplot(NULL, aes(x = residuals(M1_log))) +
  geom_histogram(bins = 30, fill = "lightblue", color = "black") +
  labs(x = "Residuals", title = "Histogram of Residuals (Log)") +
  theme_minimal()

# 4. Scale-Location Plot
p4_log <- ggplot(NULL, aes(x = fitted(M1_log), y = sqrt(abs(residuals(M1_log))))) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess", color = "red") +
  labs(x = "Fitted Values", y = "Sqrt of |Standardized Residuals|", title = "Scale-Location Plot (Log)") +
  theme_minimal()

# Arrange the plots for the model with log transformation
grid.arrange(p1_log, p2_log, p3_log, p4_log, nrow = 2, ncol = 2)

```

$$
\left[ \begin{array}{c}
            u_{i} \\ v_{i}
          \end{array}  \right] \sim N \left( \left[
          \begin{array}{c}
            0 \\ 0
          \end{array} \right], \left[
          \begin{array}{cc}
            \sigma_{u}^{2} & \rho_{uv}\sigma_{u}\sigma_v \\
            \rho_{uv}\sigma_{u}\sigma_v & \sigma_{v}^{2}
          \end{array} \right] \right) 
$$

and $\epsilon_{ij}\sim N(0,\sigma^2)$.

## Results

Write your results section here. Include the fixed and random effects tables, as below.

```{r}
music <- music %>% mutate(orch = as.numeric(instrument=="orchestral instrument"),
                          large = as.numeric(perform_type=="Large Ensemble"))
M <- lmer(na ~ orch + large + orch:large +
  (large|id), data = music)
summary(M)
```

## Discussion and Conclusions

Type discussion section.

\newpage

## References

References in APA format. For example:

Sadler, M. E., & Miller, C. J. (2010). Performance anxiety: A longitudinal study of the roles of personality and experience in musicians. Social Psychological and Personality Science, 1(3), 280-287.

Lin, M. C. (2019). An Investigation Of Music Performance Anxiety In Taiwanese Pianists, Vocalists, String And Wind Instrumentalists At The College Level.

Stoeber, J., & Eismann, U. (2007). Perfectionism in young musicians: Relations with motivation, effort, achievement, and distress. Personality and Individual Differences, 43(8), 2182-2192.

Roback, P., & Legler, J. (2021). Beyond Multiple Linear Regression: Applied Generalized Linear Models And Multilevel Models in R. CRC Press.

\newpage

## Appendix (optional)
